import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-BiTPwLYs.js";const e="/assets/image-BblXNEkz.webp",t="/assets/image-1-DwvgJaed.webp",p="/assets/image-2-DqA6AQ4S.webp",h="/assets/image-3-CY8ivyqZ.webp",r={};function d(k,s){return l(),a("div",null,[...s[0]||(s[0]=[n('<h1 id="华迪实训day1" tabindex="-1"><a class="header-anchor" href="#华迪实训day1"><span>华迪实训day1</span></a></h1><p>2024年4月8日09:07:25</p><p>qq群交流</p><h1 id="volar-idea的语言服务器要使用volar" tabindex="-1"><a class="header-anchor" href="#volar-idea的语言服务器要使用volar"><span>volar IDEA的语言服务器要使用volar</span></a></h1><h1 id="早会-9-30-10-30" tabindex="-1"><a class="header-anchor" href="#早会-9-30-10-30"><span>早会 9.30-10:30</span></a></h1><p><img src="'+e+'" alt="alt text" loading="lazy"></p><p><img src="'+t+'" alt="alt text" loading="lazy"></p><p><img src="'+p+'" alt="alt text" loading="lazy"></p><p><img src="'+h+`" alt="alt text" loading="lazy"></p><p>为什么家里蹲会带来精神痛苦？ - Moxos Yuri的回答 - 知乎 https://www.zhihu.com/question/649976562/answer/3456204390</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yml"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">根据以上json格式的api参数, 完成js格式的axios异步请求代码,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">以post请求为例:如果json中有query参数, 按以下格式请求:&quot;await axios.post(url, {params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">data,})&quot;,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">如果json中有body参数, 按以下格式请求:&quot;await axios.post(url, data)&quot;,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">不需要try catch处理异常,因为已经进行全局处理, 使用async进行异步请求.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>http://www.esjson.com/jsonyasuo.html</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yml"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">根据以上json格式的http api, 完成js格式的axios异步请求代码,把请求封装成api库,每个请求封装成一个异步typescript方法, 方法名命名为类似setAdmin的格式, 封装到一个api对象中export到外部</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">请求格式：以post请求为例:如果json中有query参数, 按以下格式请求:&quot;await axios.post(url, null, {params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">data,})&quot;,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">如果json中有body参数, 按以下格式请求:&quot;await axios.post(url, body)&quot;,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">不需要try catch处理异常,因为已经进行全局处理, 使用async进行异步请求.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yml"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">根据以上java controller代码, 完成js格式的axios异步请求代码,其中的内部类已经提前定义在js中,直接使用即可,把请求封装成api库,每个请求封装成一个异步typescript方法, 方法名命名为类似setAdmin的格式, 封装到一个api对象中export到外部</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">请求示例：</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">controller的getmapping方法中的body参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;await axios.get(url, body)&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">controller的postmapping方法中的query参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;await axios.post(url, null, {params: data,})&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">controller的postmapping方法中的body参数</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;await axios.post(url, body)&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">方法格式&quot;async sendArticle(articleData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xh.ArticleSendRequest)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Promise&lt;xh.ApiRestResponse&lt;void&gt;&gt;;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">不需要try catch处理异常,因为已经进行全局处理, 使用async进行异步请求.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标题: 在线文字压缩，去空格、换行符等 网址: http://www.wuqianling.top/software/notepad/compress.html</p><p>vscode补全属性: ctrl+.</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yml"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">根据以上java controller代码, 完成js格式的axios异步请求代码,其中的内部类已经提前定义在js中,直接使用即可,把请求封装成api库,每个请求封装成一个异步typescript方法, 方法名命名为类似setAdmin的格式, 封装到一个api对象中export到外部</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">请求示例：</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">controller的getmapping方法中的body参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;await axios.get(url, body)&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">controller的postmapping方法中的query参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;await axios.post(url, null, {params: data,})&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">controller的postmapping方法中的body参数</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;await axios.post(url, body)&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">方法格式&quot;async sendArticle(articleData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xh.ArticleSendRequest)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Promise&lt;xh.ApiRestResponse&lt;void&gt;&gt;;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">不需要try catch处理异常,因为调用者会进行处理, 使用async进行异步请求.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">不需要设置baseUrl,因为axios实例已经进行默认设置.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">在生成请求后也生成测试代码, 测试代码的格式为</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">const d4 = await articleApi.searchArticle(&#39;mysql&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">console.log(&#39;d4&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">d4)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标题: Javascript中prototype属性的详解 - 最骚的就是你 - 博客园 网址: https://www.cnblogs.com/libin-1/p/5836082.html</p><p>prototype是存放原型属性的对象，每个对象都有一个proto属性，指向创建该对象的函数的prototype属性。</p><p>标题: 为什么是 Vitest | 指南 | Vitest 网址: https://cn.vitest.dev/guide/why.html</p><p>标题: Java泛型的协变与逆变 - 掘金 网址: https://juejin.cn/post/6911302681583681544</p>`,21)])])}const g=i(r,[["render",d]]),u=JSON.parse('{"path":"/%E5%BD%92%E6%A1%A3/%E5%AD%A6%E6%A0%A1/%E5%8D%8E%E8%BF%AA%E5%AE%9E%E8%AE%AD/%E5%8D%8E%E8%BF%AA_%E5%AE%9E%E8%AE%AD_day1.html","title":"华迪实训day1","lang":"zh-CN","frontmatter":{"feed":false,"seo":false},"git":{"createdTime":1758333160000,"updatedTime":1758429650000,"contributors":[{"name":"sxh","username":"sxh","email":"2362989228@qq.com","commits":3,"url":"https://github.com/sxh"}]},"readingTime":{"minutes":2.82,"words":846},"filePathRelative":"归档/学校/华迪实训/华迪_实训_day1.md"}');export{g as comp,u as data};
